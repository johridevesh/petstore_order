/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.petstore.project.api;

import com.petstore.project.model.Order;
import com.petstore.project.model.OrderResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-20T08:50:38.096367Z[Etc/UTC]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "orders", description = "the orders API")
public interface OrdersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /orders : List all orders
     *
     * @return A list of orders (status code 200)
     */
    @Operation(
        operationId = "ordersGet",
        summary = "List all orders",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of orders", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OrderResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orders",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<OrderResponse>> ordersGet(
        
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"order_date\" : \"2000-01-23T04:56:07.000+00:00\", \"total_amount\" : 1.4658129805029452, \"id\" : 0, \"customer_id\" : 6, \"status\" : \"status\" }, { \"order_date\" : \"2000-01-23T04:56:07.000+00:00\", \"total_amount\" : 1.4658129805029452, \"id\" : 0, \"customer_id\" : 6, \"status\" : \"status\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /orders/{id} : Delete an order
     *
     * @param id  (required)
     * @return Order deleted (status code 204)
     */
    @Operation(
        operationId = "ordersIdDelete",
        summary = "Delete an order",
        responses = {
            @ApiResponse(responseCode = "204", description = "Order deleted")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/orders/{id}"
    )
    
    default ResponseEntity<Void> ordersIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /orders/{id} : Get an order by ID
     *
     * @param id  (required)
     * @return Order details (status code 200)
     */
    @Operation(
        operationId = "ordersIdGet",
        summary = "Get an order by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Order details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orders/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<OrderResponse> ordersIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"order_date\" : \"2000-01-23T04:56:07.000+00:00\", \"total_amount\" : 1.4658129805029452, \"id\" : 0, \"customer_id\" : 6, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /orders/{id} : Update an order
     *
     * @param id  (required)
     * @param order  (optional)
     * @return Order updated (status code 200)
     */
    @Operation(
        operationId = "ordersIdPut",
        summary = "Update an order",
        responses = {
            @ApiResponse(responseCode = "200", description = "Order updated")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/orders/{id}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> ordersIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Order", description = "") @Valid @RequestBody(required = false) Order order
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /orders : Create a new order
     *
     * @param order  (optional)
     * @return Order created (status code 201)
     */
    @Operation(
        operationId = "ordersPost",
        summary = "Create a new order",
        responses = {
            @ApiResponse(responseCode = "201", description = "Order created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/orders",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> ordersPost(
        @Parameter(name = "Order", description = "") @Valid @RequestBody(required = false) Order order
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
